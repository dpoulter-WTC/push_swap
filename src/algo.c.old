/* ************************************************************************** */
/*                                   _ _ _ ____                               */
/*                                   | | | |___                               */
/*  algo.c                           |_|_| |___                               */
/*                                        ___ _  _ _ _  _ _  _                */
/*  By: coding <marvin@42.fr>              |  |__| | |\ | |_/                 */
/*                                         |  |  | | | \| | \_                */
/*  Created: 2018/08/16 14:06:38 b               ____ ____ ___  ____          */
/*  Updated: 2018/08/20 18:51:45 b               |    |  | |  \ |___          */
/*                                               |___ |__| |__/ |___ .co.za   */
/* ************************************************************************** */

#include "../includes/push_swap.h"

/*t_stack		*quicksort(int n)
{
	int top_half_len;

	top_half_len = 0;
    if n == 1 return
    choose a median //it's up to you to determine the best way to do this
    for 0 to n {    //filter all values above the median into list 2
        if (value > median) {
            push list 1 top to list 2 //list 2 stores the larger half
            top_half_len++
        }
        rotate list 1 forward
    }

    //reverse the list back to original position
    rotate list 1 backward (n - top_half_len) times

    //push larger half onto smaller half
    push list 2 top to list 1 top_half_len times

    //recursively call this on the larger half
    quicksort(top_half_len)

    //rotate smaller half to front
    rotate list 1 forward top_half_len times

    //recursively call this on smaller half
    quicksort(n - top_half_len) 

    //reverse list back to original position
    rotate list 1 backward top_half_len times

	*/

t_stack		*quicksort(t_stack *a_head, t_stack *b_head, int n)
{
	int		top_half;
	int		size;
	int		i;
	t_stack	*a;
	int		median;
	t_stack *test;

	if (n == 1)
		return (a_head);
	median = median_stack(a_head);
	a = a_head;
	i = -1;
	top_half = 0;
	size = stack_size(a);
	while (++i < n)
	{
		if (a->val > median)
		{
			a = push(a, &b_head);
			ft_putendl_fd("pb", 2);
			test = a;
			while (test)
			{
				fprintf(stdout, "%d ", test->val);
				fflush(stdout);
				test = test->next;
			}
			ft_putendl_fd("", 2);
			top_half++;
		}
		else
		{
			a = rotate(a);
			ft_putendl_fd("ra", 2);
		}
	}
	i = -1;
	while (++i < top_half)
	{
		a = rrotate(a);
		ft_putendl_fd("rra", 2);
			test = a;
			while (test)
			{
				fprintf(stdout, "%d ", test->val);
				fflush(stdout);
				test = test->next;
			}
			ft_putendl_fd("", 2);
	}
	i = -1;
	while (++i < top_half)
	{
		b_head = push(b_head, &a);
		ft_putendl_fd("pa", 2);
			test = a;
			while (test)
			{
				fprintf(stdout, "%d ", test->val);
				fflush(stdout);
				test = test->next;
			}
			ft_putendl_fd("", 2);
	}
				fprintf(stdout, "%d\n", top_half);
				fflush(stdout);
    	a = quicksort(a, b_head, top_half);
	i = -1;
	while (++i < top_half)
	{
		a = rotate(a);
		ft_putendl_fd("ra", 2);
			test = a;
			while (test)
			{
				fprintf(stdout, "%d ", test->val);
				fflush(stdout);
				test = test->next;
			}
			ft_putendl_fd("", 2);
	}
	
	a = quicksort(a, b_head, n - top_half);
	
	i = -1;
	while (++i < top_half)
	{
		a = rrotate(a);
		ft_putendl_fd("rra", 2);
	}
	a_head = a;
	return (a);
}
