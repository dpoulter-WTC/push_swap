/* ************************************************************************** */
/*                                   _ _ _ ____                               */
/*                                   | | | |___                               */
/*  quicksort.c                      |_|_| |___                               */
/*                                        ___ _  _ _ _  _ _  _                */
/*  By: coding <marvin@42.fr>              |  |__| | |\ | |_/                 */
/*                                         |  |  | | | \| | \_                */
/*  Created: 2018/08/16 14:06:38 b               ____ ____ ___  ____          */
/*  Updated: 2018/09/04 19:25:03 b               |    |  | |  \ |___          */
/*                                               |___ |__| |__/ |___ .co.za   */
/* ************************************************************************** */

#include "../includes/push_swap.h"

void		show_stacks(t_stack *a_head, t_stack *b_head)
{
	t_stack *tmp;

	tmp = a_head;
	fprintf(stderr, "Stack A:\n");
	while (tmp)
	{
		fprintf(stderr, "%d ", tmp->val);
		fflush(stderr);
		tmp = tmp->next;
	}
	tmp = b_head;
	fprintf(stderr, "\nStack b:\n");
	while (tmp)
	{
		fprintf(stderr, "%d ", tmp->val);
		fflush(stderr);
		tmp = tmp->next;
	}
	fprintf(stderr, "\n\n");
	fflush(stderr);
}

int			is_sorted(t_stack *main, int size, int pile)
{
	int i;
	t_stack *head;

	i = 0;
	head = main;
	while (++i < size && head->next)
	{
		if (head->val > head->next->val && pile == 1)
			return (1);
		if (head->val < head->next->val && pile == 0)
			return (1);
		head = head->next;
	}
	return (0);
}

void		sort3(t_stack **a_head, t_stack **b_head, int size, int pile)
{
	if (is_sorted((pile) ? (*a_head) : (*b_head), size, pile))
	{
		if (is_sorted((pile) ? *(a_head) : *(b_head), 2, pile))
		{
			if (pile)
			{
				(*a_head) = swap((*a_head));
				ft_putendl("sa");
	show_stacks(*(a_head), *(b_head));
			}
			else
			{
				(*b_head) = swap((*b_head));
				ft_putendl("sbbbbbb");
	show_stacks(*a_head, *b_head);
			}
		}
		else
		{
			if (pile)
			{
				(*a_head) = rotate((*a_head));
				ft_putendl("ra");
				(*a_head) = swap((*a_head));
				ft_putendl("sa");
				(*a_head) = rrotate((*a_head));
				ft_putendl("rra");
	show_stacks(*(a_head), *(b_head));
			}
			else
			{
				(*b_head) = rotate((*b_head));
				ft_putendl("rb");
				(*b_head) = swap((*b_head));
				ft_putendl("sb");
				(*b_head) = rrotate((*b_head));
				ft_putendl("rrb");
	show_stacks(*(a_head), *(b_head));
			}
		}
		sort3(a_head, b_head, size, pile);
	}
}

int			pusher(t_stack **a_head, t_stack **b_head, int pile, int pivot)
{
	if ((pile && (*a_head)->val < pivot) || (!pile && (*b_head)->val >= pivot))
	{
		if (!pile)
		{
			(*b_head) = push((*b_head), a_head);
			ft_putendl("pa");
	show_stacks(*(a_head), *(b_head));
		}
		else
		{
			(*a_head) = push((*a_head), b_head);
			ft_putendl("pb");
	show_stacks(*(a_head), *(b_head));
		}
		return (1);
	}
	else
	{
		if (!pile)
		{
			(*b_head) = rotate((*b_head));
			ft_putendl("rb");
	show_stacks(*(a_head), *(b_head));
		}
		else
		{
			(*a_head) = rotate((*a_head));
			ft_putendl("ra");
	show_stacks(*(a_head), *(b_head));
		}
	}
	return (0);
}

void		quicksort(t_stack *a_head, t_stack *b_head, int size, int pile, int n)
{
	int i;
	int pivot;
	int reset;

	reset = 0;
	i = 0;
	pivot = median_stack((pile) ? a_head : b_head, size);
	fprintf(stderr, "\nPivot: %d\n\n", pivot);
	fflush(stderr);
	if (!is_sorted((pile) ? a_head : (b_head), size, pile))
		return ;
	while (size > 3 && i < (size / 2) + (size % 2 && !pile) && ++reset)
	{
		fprintf(stderr, "%d, %d ", size, i);
		fflush(stderr);
		i += pusher(&a_head, &b_head, pile, pivot);
	}
	while ((!n) && (reset)-- - i)
	{
		if (!pile)
		{
			(b_head) = rrotate((b_head));
			ft_putendl("rrb");
	show_stacks((a_head), (b_head));
		}
		else
		{
			(a_head) = rrotate((a_head));
			ft_putendl("rra");
	show_stacks((a_head), (b_head));
		}
	}
	if (i && !pile)
		quicksort((a_head), (b_head), i, !pile, 0);
	if (size - i <= 3)
		sort3(&(a_head), &(b_head), size, pile);
	else
		quicksort((a_head), (b_head), size - i, pile, (n == 2) ? n - 1 : n);
	if (i && pile)
		quicksort((a_head), (b_head), i, !pile, (n == 2) ? 1: 0);
	while (i--)
	{
		if (pile)
		{
			(b_head) = push((b_head), &a_head);
			ft_putendl("pa");
	show_stacks((a_head), (b_head));
		}
		else
		{
			(a_head) = push((a_head), &b_head);
			ft_putendl("pb");
	show_stacks((a_head), (b_head));
		}
	}
	show_stacks((a_head), (b_head));
}
